name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Check environment variables
        run: |
          required_vars=(
            "OPENAI_API_KEY"
            "AWS_ACCESS_KEY_ID"
            "AWS_SECRET_ACCESS_KEY"
            "GEMINI_API_KEY"
          )
          
          missing_vars=()
          for var in "${required_vars[@]}"; do
            if [ -z "${!var}" ]; then
              missing_vars+=("$var")
            fi
          done
          
          if [ ${#missing_vars[@]} -ne 0 ]; then
            echo "❌ Missing required environment variables: ${missing_vars[*]}"
            exit 1
          fi
          echo "✅ All required environment variables are set"
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

      - name: Run tests with coverage
        id: run-tests
        continue-on-error: true
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          # Create test results directory
          mkdir -p test-results
          
          # Run tests and capture output
          pytest --cov=src tests/ -v --junitxml=test-results/junit.xml > test-results/pytest.txt 2>&1 || true
          
          # Generate coverage report
          coverage report > test-results/coverage.txt
          
          # Format the test output for GitHub Actions
          TEST_OUTPUT=$(cat test-results/pytest.txt | sed 's/"/\\"/g' | tr '\n' ' ')
          COVERAGE_OUTPUT=$(cat test-results/coverage.txt | sed 's/"/\\"/g' | tr '\n' ' ')
          
          # Save as step outputs
          echo "test_output=$TEST_OUTPUT" >> $GITHUB_OUTPUT
          echo "coverage_report=$COVERAGE_OUTPUT" >> $GITHUB_OUTPUT

      - name: Make script executable
        run: chmod +x .github/scripts/send-test-results.sh

      - name: Send Discord Notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          ./.github/scripts/send-test-results.sh \
            "${{ steps.run-tests.outputs.test_output }}" \
            "${{ steps.run-tests.outputs.coverage_report }}" \
            "$GITHUB_REPOSITORY" \
            "${{ github.run_id }}"
          
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: test-results/
          
      - name: Check test status
        if: steps.run-tests.outcome != 'success'
        run: exit 1